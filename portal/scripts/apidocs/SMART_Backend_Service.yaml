swagger: '2.0'
info:
  title: SMART Backend Service Authorization
  description: HealthAPIx OAuth v2.0 API Specs for Backend Services Token Generation
host: 'healthapix-acc-dev.apigee.net'
schemes:
  - https
basePath: /oauth/v2
produces:
  - application/json
paths:
  /token:
    post:
      summary: Request Backend Services Access Token
      description: |
        Trusted B2B Partner makes a request to the token endpoint by adding the
        following parameters describerd  below
      security:
        - basicAuth:[]
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Header containing Base64 encoded client_id:client_secret. Example - Basic Base64Encode(clientId:clientSecret)
          default: none
          required: true  
          type: string   
        - name: grant_type
          in: formData
          description: Value MUST be set to "client_credentials" as per RFC.
          required: true
          type: string
          enum:
            - client_credentials
        - name: client_assertion_type
          in: formData
          description: Type of the self-assertion token.
          required: true
          type: string
          enum:
            - urn:ietf:params:oauth:client-assertion-type:jwt-bearer
        - name: client_assertion
          in: formData
          description: Signed authentication JWT value. Example - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6Ikp
                        vaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV
                        _adQssw5c
          required: true
          type: string
        - name: scope
          in: formData
          description: Scopes required. Example - "system/MedicationDispense.write system/MedicationStatement.read system/Immunization.write 
                        system/ExplanationOfBenefit.write".
          required: true
          type: string
      tags:
        - Obtain Access Token
      responses:
        '200':
          description: Authorisation token (Bearer)
          schema:
            $ref: '#/definitions/Token'
          examples:
            application/json: |-
              {
                 "access_token":"2YotnFZFEjr1zCsicMWpAA",
                 "token_type":"Bearer",
                 "expires_in":3600,
                 "scope": "system/MedicationDispense.write system/MedicationStatement.read system/Immunization.write system/ExplanationOfBenefit.write"
               }
        '401':
          description: As per RFC authorisation server responds with 401 in case of error
          schema:
            $ref: '#/definitions/Error'
          examples:
            application/json: |-
              {
                "error":"Invalid request",
                "error_description": "Public key url is invalid "
              }
definitions:
  Token:
    type: object
    properties:
      access_token:
        type: string
        description: The access token value
      token_type:
        type: string
        enum:
          - Bearer
        description: Type of the token is set to "Bearer"
      expires_in:
        type: integer
        format: int32
        description: The lifetime in seconds of the access token
      scope:
        type: string
        description: authorized scopes based on apps registered scopes
  Error:
    type: object
    properties:
      error:
        type: string
        enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
      error_description:
        type: string
        description: Human-readable text providing additional information
      error_uri:
        type: string
        description: A URI identifying a human-readable web page with information about the error
components:
  securitySchemes:
    basicAuth:     
      type: http
      scheme: basic